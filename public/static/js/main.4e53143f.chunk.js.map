{"version":3,"sources":["assets/duration-icon.svg","assets/earning-history-on-click.svg","assets/appointment-details.svg","Main.js","Main2.js","TestComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Main2","Input","TextArea","DatePicker","RangePicker","props","disabledDate","current","moment","subtract","changeDate","e","setState","date","handleChange","target","value","includes","name","state","time","dataset","id","console","log","addNewRow","prevState","index","Math","random","startDuration","endDuration","deleteRow","record","filter","r","handleSubmit","num","curr","JSON","parse","currency","data","appointmentTitle","appointmentDescription","description","appointmentThumbnail","appointmentPrice","duration","hours","minutes","availableDates","availabilityType","availablity","timings","status","timezone","axios","post","pagedata","_id","then","res","alert","catch","error","timezones","currencies","today","Date","format","this","get","match","params","stringify","style","padding","gutter","width","flexDirection","justify","className","xs","md","src","marginLeft","marginTop","height","alt","span","display","justifyContent","alignItems","size","shape","type","onClick","paddingTop","borderTop","Item","required","onChange","defaultValue","placeholder","rows","map","val","fullName","idx","data-id","aria-hidden","float","react","Component","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e53143f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/duration-icon.815f3f0e.svg\";","export default __webpack_public_path__ + \"static/media/earning-history-on-click.8ba50204.svg\";","export default __webpack_public_path__ + \"static/media/appointment-details.a923cbe9.svg\";","import { Calendar, Col, Row, Typography } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport duration from \"./assets/duration-icon.svg\";\r\nimport earning from \"./assets/earning-history-on-click.svg\";\r\nimport \"./assets/bookAppointment.css\";\r\nimport appointmentDetails from \"./assets/appointment-details.svg\";\r\n// import 'react-modern-calendar-datepicker/lib/DatePicker.css';\r\n// import { Calendar } from 'react-modern-calendar-datepicker';\r\nimport { TimePicker, Button, Modal, Form, Input, Radio } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { computeHeadingLevel } from \"@testing-library/react\";\r\n\r\n\r\nexport default function Main() {\r\n    const [value, setValue] = useState();\r\n    const [month, setMonth] = useState(moment().format(\"MM\"));\r\n    const [year, setYear] = useState(moment().format(\"YYYY\"));\r\n    const [visible, setVisible] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [data, setData] = useState([]);\r\n    const [durations, setDurations] = useState({});\r\n    const [currency, setCurrency] = useState({});\r\n    const [date, setDate] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(\r\n                \"https://demo.cruspo.com/api/admin/appointment/getBookedAppointments/6/2021\"\r\n            )\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                // setValue(response.data[0]);\r\n                // console.log(\r\n                //     moment(response.data[0].bookedDate).format(\"DD-MM-YYYY\")\r\n                // );\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n        axios\r\n            .get(\r\n                `https://keshavsuman.cruspo.com/api/admin/appointment/${this.props.match.params.id}`\r\n            )\r\n            .then((res) => {\r\n                setData(res.data);\r\n                setDurations(res.data.duration);\r\n                setCurrency(res.data.currency);\r\n                setDate(res.data.availableDates);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n\r\n\r\n    function disableDate(current) {\r\n        var disdate=[];\r\n        date.map(val=>{\r\n            disdate.push(formatDate(val.value))\r\n        })\r\n        \r\n        \r\n        // return current && current.valueOf() < moment().subtract(1, 'days') ;\r\n                return !(current > moment().subtract(1, 'days') && disdate.includes(formatDate(current)));\r\n    }\r\n    function formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n    const onCreate = (values) => {\r\n        console.log(\"Received values of form: \", values);\r\n        setVisible(false);\r\n    };\r\n\r\n    function openModal(current) {\r\n        const v = moment(current._d.toString()).format(\"DD MMM YYYY\");\r\n        setVisible(true);\r\n        setValue(v);\r\n        console.log(moment(current.toString()).format(\"DD MMM YYYY\"));\r\n        console.log(value);\r\n        console.log(month, year);\r\n    }\r\n\r\n    function panelChange(date) {\r\n        let m = date;\r\n        let ac = m.toString();\r\n        const month = moment(ac.slice(4, 7)).format(\"MMM\"); //ATTENTION\r\n        const year = moment(ac.slice(11, 15)).format(\"YYYY\");\r\n        setMonth(month);\r\n        setYear(year);\r\n        console.log(month, year);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        setVisible(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Row\r\n                style={{\r\n                    marginLeft: 50,\r\n                    marginRight: 50,\r\n                    padding: \"80px 40px\",\r\n                    minHeight: '40vh'\r\n                }}\r\n                gutter={20}\r\n                justify=\"space-around\"\r\n            >\r\n                <Col span={24}>\r\n                    <Row\r\n                        className=\"gutter-row\"\r\n                        style={{ height: \"30vh\", width: \"100%\" }}\r\n                        gutter={40}\r\n                        justify=\"space-between\"\r\n                    >\r\n                        <Col\r\n                            className=\"gutter-row\"\r\n                            xs={24}\r\n                            md={8}\r\n                            style={{ height: \"100%\" }}\r\n                        >\r\n                            <img\r\n                                src=\"https://d3e54v103j8qbb.cloudfront.net/plugins/Basic/assets/placeholder.60f9b1840c.svg\"\r\n                                alt=\"appointmentImage\"\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                    height: \"100%\",\r\n                                    maxWidth: \"100%\",\r\n                                    maxHeight: \"none\",\r\n                                    objectFit: \"cover\",\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"gutter-row\" xs={24} md={16}>\r\n                            <Row style={{ textAlign: \"left\" }}>\r\n                                <Typography.Title\r\n                                    level={2}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    {data.appointmentTitle}\r\n                                </Typography.Title>\r\n                                <Typography.Paragraph\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        fontSize: \"14px\",\r\n                                        lineHeight: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    {data.appointmentDescription}\r\n                                </Typography.Paragraph>\r\n                            </Row>\r\n                            <Row\r\n                                justify=\"space-between\"\r\n                                style={{ marginTop: \"20px\" }}\r\n                            >\r\n                                <Col>\r\n                                    <img\r\n                                        src={duration}\r\n                                        alt=\"Appointment Duration\"\r\n                                    />\r\n                                    <Typography.Text>\r\n                                        {durations.hours == 0 ? \" \" + durations.minutes + \" Minutes\" : durations.hours + \" Hours\"}\r\n                                    </Typography.Text>\r\n                                </Col>\r\n                                <Col>\r\n                                    <img\r\n                                        src={earning}\r\n                                        alt=\"Appointment Price\"\r\n                                    />\r\n                                    <Typography.Text>\r\n                                        {\" \" + currency.symbol + \" \" + data.appointmentPrice}\r\n                                    </Typography.Text>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row\r\n                className=\"gutter-row\"\r\n                style={{\r\n                    marginTop: \"10px\",\r\n                    minHeight: \"60vh\",\r\n                    borderTop: \"1px solid black\",\r\n                    padding: \"50px\",\r\n                }}\r\n                span={20}\r\n            >\r\n                <Col span={24}>\r\n                    <Calendar\r\n                        style={{ fontSize: \"1.1rem\" }}\r\n                        onPanelChange={panelChange}\r\n                        fullscreen={true}\r\n                        disabledDate={disableDate}\r\n                        onSelect={openModal}\r\n                    />\r\n                    <CollectionCreateForm\r\n                        visible={visible}\r\n                        onCreate={onCreate}\r\n                        onCancel={handleCancel}\r\n                        val={value}\r\n                        date={date}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nconst CollectionCreateForm = ({ visible, onCreate, onCancel, val,date }) => {\r\n    const [form] = Form.useForm();\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [startTiming, setStartTiming] = useState('');\r\n    const [endTiming, setEndTiming] = useState('');\r\n    const [email, setEmail] = useState('');\r\n\r\n    var stime=[];\r\n    var etime=[];\r\n    var hour=[];\r\n      var minute=[];\r\n    const disabledHour =() =>{\r\n      date.map(item=>{\r\n          if( formatDate(item.value) == formatDate(val)){\r\n               item.timings.map(v=>{\r\n                   console.log(v.endDuration)\r\n                stime.push(v.startDuration);\r\n                etime.push(v.endDuration);\r\n              })\r\n          }\r\n      })\r\n      \r\n         for(var j=0;j<stime.length;j++) {\r\n          for(var i=0;i<24;i++){\r\n          if(i < (stime[j].substring(0, 2)) || i > (etime[j].substring(0, 2))){\r\n            hour.push(i);\r\n          }\r\n      }\r\n     \r\n    //   for(var i=0;i<59;i++){\r\n    //     if(i>=setTime(stime[j],\"minutes\") && i <= setTime(etime[j],\"minutes\")){\r\n    //       minute.push(i);\r\n    //     }\r\n    // }\r\n}\r\n\r\nconsole.log(hour)\r\nreturn hour;\r\n}\r\n\r\nconst handleSubmit = () => {\r\n    var stime=[];\r\n    var etime=[];\r\n    date.map(item=>{\r\n        if( formatDate(item.value) == formatDate(val)){\r\n             item.timings.map(v=>{\r\n                 console.log(v.endDuration)\r\n              stime.push(v.startDuration);\r\n              etime.push(v.endDuration);\r\n            })\r\n        }\r\n    })\r\n  if(setTime(startTiming) >= stime[0] && setTime(startTiming) <= etime[0] && setTime(startTiming)<setTime(endTiming)){\r\n\r\n    const data = {\r\n        \"firstName\": firstName,\r\n        \"lastName\": lastName,\r\n        \"bookedDate\": val,\r\n        \"timings\": {\r\n            \"startTime\": startTiming,\r\n            \"endTime\": endTiming\r\n        },\r\n        \"email\": email,\r\n    }\r\n    axios\r\n        .post(\r\n            `https://demo.cruspo.com/api/admin/appointment/bookAppointment/${this.props.match.params.id}`, data\r\n        )\r\n        .then((response) => {\r\n            console.log(response.data);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n}else{\r\n    alert(`Please select time between ${stime[0]} and ${etime[0]} `)\r\n    console.log(startTiming ,stime[0] )\r\n\r\n}\r\n}\r\n\r\nconst disabledMinutes =() =>{\r\n    \r\n    \r\n       for(var j=0;j<stime.length;j++) {\r\n        for(var i=0;i<24;i++){\r\n        if(i < (stime[j].substring(3, 5)) || i > (etime[j].substring(3,5))){\r\n          minute.push(i);\r\n        }\r\n    }\r\n}\r\n console.log(minute)\r\n      return minute;\r\n    }\r\n   \r\n    function setTime(time) {\r\n        var t = new Date();\r\n        t.setTime(time);\r\n           var seconds = t.getSeconds();\r\n           var minutes = t.getMinutes();\r\n           var hours = t.getHours();\r\n        return hours +\":\" +minutes;\r\n                \r\n    }\r\n    function formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n            \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n    return (\r\n        <Modal\r\n            className=\"apt-modal\"\r\n            visible={visible}\r\n            title=\"CONFIRM APPOINTMENT\"\r\n            okText=\"Confirm\"\r\n            cancelText=\"Cancel\"\r\n            onCancel={onCancel}\r\n            onOk={() => {\r\n                form.validateFields()\r\n                    .then((values) => {\r\n                        onCreate(values);\r\n                        form.resetFields();\r\n                    })\r\n                    .catch((info) => {\r\n                        console.log(\"Validate Failed:\", info);\r\n                    });\r\n            }}\r\n            footer={null}\r\n        >\r\n            <Row gutter={4} justify=\"space-between\">\r\n                <Col className=\"gutter-row\" xs={24} lg={10}>\r\n                    <img\r\n                        className=\"appointment-details-image\"\r\n                        src={appointmentDetails}\r\n                    />\r\n                </Col>\r\n                <Col className=\"gutter-row\" xs={24} xl={12}>\r\n                    <Row>\r\n                        <Form\r\n                            form={form}\r\n                            layout=\"vertical\"\r\n                            name=\"form_in_modal\"\r\n                            size=\"large\"\r\n                        >\r\n                            <Row justify=\"space-between\">\r\n                                <Col span={11}>\r\n                                    <Form.Item label=\"First Name\">\r\n                                    \r\n                                        <Input name=\"firstName\" onChange={(e) => { setFirstName(e.target.value) }} />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span={11}>\r\n                                    <Form.Item label=\"Last Name\">\r\n                                        <Input name=\"lastName\" onChange={(e) => { setLastName(e.target.value) }} />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            <Col span={24}>\r\n                                <Form.Item label=\"Appointment Date\">\r\n                                    <Input value={val} disabled />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Row justify=\"space-between\">\r\n                                <Col span={11}>\r\n                                    <Form.Item label=\"Start Time\">\r\n                                    <TimePicker disabledHours={disabledHour} onChange={(time) => { setStartTiming(time) }} />\r\n                                    {/* <TimePicker onChange={(time) => { setStartTiming(time) }} /> */}\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span={11}>\r\n                                    <Form.Item label=\"End Time\">\r\n                                        <TimePicker  disabledHours={disabledHour} onChange={(time) => { setEndTiming(time) }} />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            <Col span={24}>\r\n                                <Form.Item\r\n                                    label=\"Email\"\r\n                                    rules={[{ required: true, type: \"email\" }]}\r\n                                >\r\n                                    <Input name=\"email\" onChange={(e) => { setEmail(e.target.value) }} />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Button onClick={handleSubmit} style={{ color: 'white', backgroundColor: 'blue' }}>Book</Button>\r\n                        </Form>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Modal>\r\n    );\r\n};\r\n","import react from 'react';\r\nimport { Form, Select, Row, Col, Input, Button, TimePicker, DatePicker } from 'antd';\r\nimport './assets/createAppointment.css';\r\nimport moment, { duration } from 'moment';\r\nimport axios from 'axios';\r\nconst { TextArea } = Input;\r\nconst { RangePicker } = DatePicker;\r\n\r\n class Main2 extends react.Component{\r\n     constructor(props){\r\n         super(props);\r\n         this.state={\r\n            appointmentTitle: \"\",\r\n            description: \"\",\r\n            currency: [],\r\n            appointmentPrice: null,\r\n            duration: \"\",\r\n            time: [{\r\n                index: Math.random(), startDuration: null,\r\n                endDuration: null\r\n            }],\r\n            date: \"\",\r\n            availablity: \"\",\r\n            timezone: \"\",\r\n            status:\"\",\r\n            appointmentThumbnail:\"\",\r\n            pagedata:[],\r\n            timezones:[],\r\n            currencies:[]\r\n         }\r\n        var today = new Date()\r\n    var todaysdate = moment(today).format('YYYY-MM-DD');\r\n     }\r\n   \r\n    componentDidMount(){\r\n        console.log(this.props)\r\n        axios\r\n        .get(\r\n            \"https://keshavsuman.cruspo.com/api/currencies\"\r\n        )\r\n        .then((res) => {\r\n            this.setState({currencies: res.data});\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    axios\r\n        .get(\r\n            \"https://keshavsuman.cruspo.com/api/timezones\"\r\n        )\r\n        .then((res) => {\r\n            this.setState({timezones: res.data});\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n        axios\r\n            .get(\r\n                `https://keshavsuman.cruspo.com/api/admin/appointment/${this.props.match.params.id}`\r\n            )\r\n            .then((res) => {\r\n                this.setState({\r\n                    pagedata:res.data,\r\n                    appointmentTitle: res.data.appointmentTitle,\r\n                    description: res.data.appointmentDescription,\r\n                    currency:JSON.stringify(res.data.currency),\r\n                    appointmentPrice: res.data.appointmentPrice,\r\n                    duration: res.data.duration.minutes == 0 ? res.data.duration.hours:res.data.duration.minutes,\r\n                    time: [{\r\n                        index: Math.random(), startDuration: res.data.availableDates[0].timings[0].startDuration,\r\n                        endDuration: res.data.availableDates[0].timings[0].endDuration\r\n                    }],\r\n                    date: res.data.availableDates[0].value,\r\n                    status:res.data.status,\r\n                    appointmentThumbnail:res.data.appointmentThumbnail,\r\n                    availablity: res.data.availableDates[0].availabilityType,\r\n                    timezone:res.data.timezone\r\n                               })\r\n                            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n       \r\n    }\r\n     disabledDate=(current)=> {\r\n        // Can not select days before today and today\r\n        return current && current < moment().subtract(1, \"days\");\r\n    }\r\n     changeDate = (e) => {\r\n        this.setState({ date: e })\r\n    }\r\n     handleChange = (e) => {\r\n        if (e.target.value !== \"\") {\r\n            if ([\"startDuration\", \"endDuration\"].includes(e.target.name)) {\r\n                var time = [...this.state.time]\r\n                time[e.target.dataset.id][e.target.name] = e.target.value;\r\n            } else {\r\n                if (\"currency\" == (e.target.name)) {\r\n                    this.setState({ [e.target.name]: e.target.value})\r\n                    console.log(e.target.value)\r\n                }else{\r\n                this.setState({ [e.target.name]: e.target.value })\r\n            }\r\n        }\r\n    }\r\n}\r\n     addNewRow = (e) => {\r\n        this.setState((prevState) => ({\r\n            ...prevState, time: [...prevState.time, { index: Math.random(), startDuration: null, endDuration: null }],\r\n        }));\r\n    }\r\n\r\n     deleteRow = (record) => {\r\n        this.setState({\r\n             time: this.state.time.filter(r => r !== record)\r\n        });\r\n\r\n    }\r\n     handleSubmit = (num) => {\r\n         var curr = JSON.parse(this.state.currency);\r\n        var data = {\r\n            appointmentTitle: this.state.appointmentTitle,\r\n            appointmentDescription: this.state.description,\r\n            currency: curr,\r\n            appointmentThumbnail: \"\",\r\n            appointmentPrice: this.state.appointmentPrice,\r\n            duration: this.state.duration == 30 || this.state.duration == 45 ? { hours: 0, minutes: this.state.duration } : { hours: this.state.duration, minutes: 0 },\r\n            availableDates: [{\r\n                availabilityType: this.state.availablity,  // Enums ['Once','Monday','Tuesday','Wednesday','Thrusday','Friday','Saturday','Sunday']\r\n                value: this.state.date,\r\n                timings: this.state.time\r\n            }],\r\n            status: num == 1 ? \"DRAFT\" : \"PUBLISHED\",\r\n            timezone: this.state.timezone\r\n        }\r\n        console.log(data);\r\n        axios\r\n            .post(\r\n                `https://keshavsuman.cruspo.com/api/admin/appointment/updateAppointment/${this.state.pagedata._id}`, data\r\n            )\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                alert(\"update successfully\")\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n    render()\r\n    {\r\n    return (\r\n\r\n        <Row style={{ padding: '20px' }}>\r\n        {console.log(this.state)}\r\n            <Row gutter={10} style={{ width: '100%', flexDirection: 'column' }} justify=\"space-between\">\r\n                <Form >\r\n                    <Row justify=\"space-between\" className=\"gutter-row\">\r\n                        <Col xs={12} md={4}><img src='https://picsum.photos/seed/picsum/200/300' style={{ marginLeft: 70, marginTop: 20 }} width='300' height=\"150\" alt=\"dead\"></img></Col>\r\n                        <Col span={8} style={{ display: 'flex', justifyContent: \"space-evenly\", alignItems: 'center' }}>\r\n                            <Button size=\"medium\" shape=\"round\" type=\"primary\" onClick={() => { this.handleSubmit(1) }} >Save Changes</Button>\r\n                            <Button shape=\"round\" size=\"medium\" type=\"primary\" onClick={() => { this.handleSubmit(2) }} >Save & Publish</Button>\r\n                            <Button shape=\"round\" size=\"medium\" type=\"primary\" onClick={() => { this.handleSubmit(2) }} >Unpublish</Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row justify=\"center\" className=\"gutter-row\" style={{ marginTop: '20px', paddingTop: '20px', borderTop: '1px solid lightgrey' }} >\r\n                        <Col span={22}>\r\n                            <Row justify=\"space-around\">\r\n                                <Col className=\"gutter-row\" span={24}>\r\n                                    <Form.Item><input required style={{ width: \"100%\", height: \"40px\" }} onChange={(e) => { this.handleChange(e) }} name=\"appointmentTitle\" defaultValue={this.state.appointmentTitle} placeholder=\"Title\" size=\"large\" /></Form.Item>\r\n                                    <Form.Item><textarea required name=\"description\" defaultValue={this.state.description} style={{ width: \"100%\" }} onChange={(e) => { this.handleChange(e) }} placeholder=\"Description\" size=\"large\" rows={5} /></Form.Item>\r\n                                </Col>\r\n                                <Col className=\"gutter-row\" span={24}>\r\n                                    <Row gutter={8}>\r\n                                        <Col className=\"gutter-row\" span={12}>\r\n                                            <Form.Item>\r\n                                                <select required  value={this.state.currency} onChange={(e) =>{this.handleChange(e)}} style={{ width: \"100%\", height: \"40px\" }} name='currency' placeholder=\"Currency\" size=\"large\">\r\n                                                    <option value=''>Select Currency</option>\r\n                                                    {this.state.currencies.map(val=>\r\n                                                      <option value={JSON.stringify(val)}>{val.fullName}</option>\r\n                                                    )}\r\n                                                </select>\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                        <Col className=\"gutter-row\" span={12}>\r\n                                            <Form.Item>\r\n                                                <input required type=\"int\"  defaultValue={this.state.appointmentPrice} onChange={(e) => { this.handleChange(e) }} style={{ width: \"100%\", height: \"40px\" }} name=\"appointmentPrice\" placeholder=\"Price\" size=\"large\" />\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row gutter={8}>\r\n                                        <Col className=\"gutter-row\" span={12}>\r\n                                            <Form.Item>\r\n                                                <select required  value={this.state.duration } onChange={(e) => { this.handleChange(e) }} style={{ width: \"100%\", height: \"40px\" }} name=\"duration\" placeholder=\"Duration\" size=\"large\">\r\n                                                    <option value=''>Duration</option>\r\n                                                    <option value={30}>30 minutes</option>\r\n                                                    <option value={45}>45 minutes</option>\r\n                                                    <option value={1}>1 hour</option>\r\n                                                    <option value={2}>2 hour</option>\r\n\r\n                                                </select>\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                        <Col className=\"gutter-row\" span={12}>\r\n                                            <Form.Item>\r\n                                                <select required  value={this.state.availablity} onChange={(e) => { this.handleChange(e) }} style={{ width: \"100%\", height: \"40px\" }} name='availablity' placeholder=\"Currency\" size=\"large\">\r\n                                                    <option value=''>Availability</option>\r\n                                                    <option value='Once'>Once</option>\r\n                                                    <option value='Monday'>Monday</option>\r\n                                                    <option value='Tuesday'>Tuesday</option>\r\n                                                    <option value='Wednesday'>Wednesday</option>\r\n                                                    <option value='Thrusday'>Thrusday</option>\r\n                                                    <option value='Friday'>Friday</option>\r\n                                                    <option value='Saturday'>Saturday</option>\r\n                                                    <option value='Sunday'>Sunday</option>\r\n                                                </select>\r\n                                            </Form.Item>``\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row gutter={8}>\r\n\r\n                                        <Col className=\"gutter-row\" span={12}>\r\n                                            <Form.Item>\r\n                                                <select required value={this.state.timezone} onChange={(e) => { this.handleChange(e) }} style={{ width: \"100%\", height: \"40px\" }} name='timezone' placeholder=\"Currency\" size=\"large\">\r\n                                                    <option value=\"\">Select Timezone</option>\r\n                                                    {this.state.timezones.map(val=>\r\n                                                      <option value={val}>{val}</option>\r\n                                                    )}\r\n                                                </select>\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                        <Col className=\"gutter-row\" span={12}>\r\n                                            <DatePicker defaultValue={this.state.date} onChange={this.changeDate} disabledDate={this.disabledDate} style={{ width: '100%' }} />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Col className=\"gutter-row\" span={24}>\r\n                                        <table>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Start Time</th>\r\n                                                    <th>End Time</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {this.state.time.map((val, idx) => {\r\n                                                    let startDuration = `startDuration-${idx}`, endDuration = `endDuration-${idx}`\r\n                                                    return (\r\n                                                        <tr key={val.index}>\r\n                                                            <td>\r\n                                                                <Input required type=\"time\" style={{ width: \"300px\" }} onChange={(e)=>this.handleChange(e)} name=\"startDuration\" id={startDuration} data-id={idx} />\r\n                                                            </td>\r\n                                                            <td>\r\n                                                                <Input required type=\"time\" style={{ width: \"300px\" }} onChange={(e)=>this.handleChange(e)} name=\"endDuration\" id={endDuration} data-id={idx} />\r\n                                                            </td>\r\n                                                            <td>\r\n                                                                {\r\n                                                                    idx === 0 ? <i aria-hidden=\"true\"></i>\r\n                                                                        : <button onClick={(() => this.deleteRow(val))} >-<i aria-hidden=\"true\"></i></button>\r\n                                                                }\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    )\r\n                                                })\r\n                                                }\r\n                                            </tbody>\r\n                                            <button style={{ float: \"left\" }} onClick={this.addNewRow} type=\"button\" className=\"binput\">+<i className=\"binput\" aria-hidden=\"true\"></i></button>\r\n                                        </table>\r\n                                    </Col>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Row>\r\n            <Row style={{ padding: '40px', marginTop: '20px' }}>\r\n                {/* <Calendar value={values.date} onChange={changeDate} style={{ fontSize: '1.1rem ' }} /> */}\r\n\r\n            </Row>\r\n        </Row>\r\n    );\r\n}\r\n}\r\nexport default Main2;\r\n\r\n","import { Component } from \"react\";\nimport React from 'react';\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fields: {},\n            errors: {},\n        };\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n\n        //Name\n        if (!fields[\"name\"]) {\n            formIsValid = false;\n            errors[\"name\"] = \"Cannot be empty\";\n        }\n\n        if (typeof fields[\"name\"] !== \"undefined\") {\n            if (!fields[\"name\"].match(/^[a-zA-Z]+$/)) {\n                formIsValid = false;\n                errors[\"name\"] = \"Only letters\";\n            }\n        }\n\n        //Email\n        if (!fields[\"email\"]) {\n            formIsValid = false;\n            errors[\"email\"] = \"Cannot be empty\";\n        }\n\n        if (typeof fields[\"email\"] !== \"undefined\") {\n            let lastAtPos = fields[\"email\"].lastIndexOf(\"@\");\n            let lastDotPos = fields[\"email\"].lastIndexOf(\".\");\n\n            if (\n                !(\n                    lastAtPos < lastDotPos &&\n                    lastAtPos > 0 &&\n                    fields[\"email\"].indexOf(\"@@\") == -1 &&\n                    lastDotPos > 2 &&\n                    fields[\"email\"].length - lastDotPos > 2\n                )\n            ) {\n                formIsValid = false;\n                errors[\"email\"] = \"Email is not valid\";\n            }\n        }\n\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    contactSubmit(e) {\n        e.preventDefault();\n\n        if (this.handleValidation()) {\n            alert(\"Form submitted\");\n        } else {\n            // alert(\"Form has errors.\");\n        }\n    }\n\n    handleChange(field, e) {\n        let fields = this.state.fields;\n        fields[field] = e.target.value;\n        this.setState({ fields });\n    }\n\n    render() {\n        return (\n            <div>\n                <form\n                    name=\"contactform\"\n                    className=\"contactform\"\n                    onSubmit={this.contactSubmit.bind(this)}\n                >\n                    <div className=\"col-md-6\">\n                        <fieldset>\n                            <input\n                                // ref=\"name\"\n                                type=\"text\"\n                                size=\"30\"\n                                placeholder=\"Name\"\n                                onChange={this.handleChange.bind(this, \"name\")}\n                                value={this.state.fields[\"name\"]}\n                            />\n                            <span style={{ color: \"red\" }}>\n                                {this.state.errors[\"name\"]}\n                            </span>\n                            <br />\n                            <input\n                                // refs=\"email\"\n                                type=\"text\"\n                                size=\"30\"\n                                placeholder=\"Email\"\n                                onChange={this.handleChange.bind(this, \"email\")}\n                                value={this.state.fields[\"email\"]}\n                            />\n                            <span style={{ color: \"red\" }}>\n                                {this.state.errors[\"email\"]}\n                            </span>\n                            <br />\n                            <input\n                                // refs=\"phone\"\n                                type=\"text\"\n                                size=\"30\"\n                                placeholder=\"Phone\"\n                                onChange={this.handleChange.bind(this, \"phone\")}\n                                value={this.state.fields[\"phone\"]}\n                            />\n                            <br />\n                            <input\n                                // refs=\"address\"\n                                type=\"text\"\n                                size=\"30\"\n                                placeholder=\"Address\"\n                                onChange={this.handleChange.bind(\n                                    this,\n                                    \"address\"\n                                )}\n                                value={this.state.fields[\"address\"]}\n                            />\n                            <br />\n\n                            <button type='submit'>Submit</button>\n                        </fieldset>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// import logo from './logo.svg';\nimport React, { Fragment } from 'react';\nimport Main from './Main';\nimport Main2 from './Main2';\nimport Formt from './testForm';\nimport Test from './TestComponent.js';\nimport './App.css';\nimport { Route, Switch, withRouter } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\nfunction App() {\n  return (\n    <Fragment >\n    <BrowserRouter>\n    <Switch>\n              {/* <Route exact path=\"/\" component={Main} /> */}\n              <Route path=\"/\" component={Main2} />\n    </Switch>\n    </BrowserRouter>\n    </Fragment>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}